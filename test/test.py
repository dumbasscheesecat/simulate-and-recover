import unittest
import numpy as np
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))
from ezdiffusion import EZDiffusionModel 

class TestEZDiffusionModel(unittest.TestCase):
    
    def setUp(self):
        self.model = EZDiffusionModel()

    def test_valid_initialization(self):
        self.assertIsInstance(self.model, EZDiffusionModel)

    def test_unfitted_parameter(self):
        with self.assertRaises(AttributeError):
            R_obs = self.model.R_obs  

    def test_invalid_boundary_separation(self):
        with self.assertRaises(ValueError):
            self.model.simulate_predicted(a=2.5, v=1, t=0.2)  

    def test_invalid_drift_rate(self):
        with self.assertRaises(ValueError):
            self.model.simulate_predicted(a=1, v=-0.5, t=0.2)  

    def test_invalid_nondecision_time(self):
        with self.assertRaises(ValueError):
            self.model.simulate_predicted(a=1, v=1, t=0.8)  

    def test_invalid_type_input(self):
        with self.assertRaises(ValueError):
            self.model.simulate_predicted(a="string", v=1, t=0.2)  

    def test_no_noise(self):
        a = np.random.uniform(0.5, 2)
        v = np.random.uniform(0.5, 2)
        t = np.random.uniform(0.1, 0.5)
        R_pred, M_pred, V_pred = self.model.simulate_predicted(a, v, t)
        v_est, a_est, t_est = self.model.simulate_estimated(R_pred, M_pred, V_pred)
        bias = (v - v_est) + (a - a_est) + (t - t_est)
        self.assertAlmostEqual(bias, 0.0, places=6)


    #the following are generated by gpt before debugged
    def test_squared_error_reduction(self):
        """Test that squared error decreases as N increases (i.e., larger sample sizes improve estimates)."""
        a = np.random.uniform(0.5, 2)
        v = np.random.uniform(0.5, 2)
        t = np.random.uniform(0.1, 0.5)

        _, bsq_10 = self.model.recover_parameters(a, v, t, N=10)
        _, bsq_40 = self.model.recover_parameters(a, v, t, N=40)
        _, bsq_4000 = self.model.recover_parameters(a, v, t, N=4000)

        self.assertLess(bsq_40, bsq_10, "Squared error of N=40 is not smaller than N=10")
        self.assertLess(bsq_4000, bsq_40, "Squared error of N=4000 is not smaller than N=40")

    def test_bias_convergence(self):
        """Test that bias averages to 0 for increasing N."""
        a = np.random.uniform(0.5, 2)
        v = np.random.uniform(0.5, 2)
        t = np.random.uniform(0.1, 0.5)

        b_10, _ = self.model.recover_parameters(a, v, t, N=10)
        b_40, _ = self.model.recover_parameters(a, v, t, N=40)
        b_4000, _ = self.model.recover_parameters(a, v, t, N=4000)

        self.assertAlmostEqual(b_10, 0, places=0, msg="Bias for N=10 is not almost equal to 0")
        self.assertAlmostEqual(b_40, 0, places=0, msg="Bias for N=40 is not almost equal to 0")
        self.assertAlmostEqual(b_4000, 0, places=0, msg="Bias for N=4000 is not almost equal to 0")

if __name__ == "__main__":
    unittest.main()
